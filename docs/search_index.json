[["index.html", "R Bootcamp Module 1 Welcome What is this website? Who are we?", " R Bootcamp Module 1 Welcome What is this website? This is not a textbook or an encyclopedia. This is not a reference manual. It is not exhaustive or comprehensive. We barely mention statistical tests at all. There is almost no theory. In fact, this curriculum is biased, non-representative, and incomplete – by design. So what is this? This website is a guide designed to help you through the most dangerous period in your data science education: your very first steps. The first few weeks. That is when 99% percent of people give up on learning to code. You want to be part of the 1%? Okay, then you need to understand these 3 things: Premise 1: We learn best by doing. Our goal is to get you doing data science. We will keep theory and detail to a minimum. We will give you the absolute basics, then offer you exercises and puzzles that motivate you to learn the rest. Then, once you’ve been doing data science for a bit, you soon begin thinking like a data scientist. By that, we mean tackling ambiguous problems with persistence, independence, and creative problem solving. With the focus on doing (as opposed to listening, reading, watching, etc.), the burden is on you. You gotta do the work. Premise 2: We learn best with purpose. Once you gain comfort with the basic skills, you will be able to start working on real data, for real projects, with real impact. You will start to care about what you are coding. And that is when the learning curve skyrockets – because you are motivated, and because you are learning reactively, instead of preemptively. Our goal is to get you to the point of take-off as quickly as possible. Premise 3: A simple toolbox is all you need to build a house. Once you become comfortable with a few basic coding tools, you can build pretty much anything. The toolbox doesn’t need to be that big; if you know how to use your tools well, and if you have enough building supplies (i.e., data), the possibilities are limitless. One more thing that this is not: This is not a fancy interactive tutorial with bells or whistles. We purposefully designed this to be simple and “analog”. You will not be typing your code into this website and getting feedback from a robot, or setting up an account to track your progress, or getting pretty merit badges or points when you complete each module. Instead, you will be doing your work on your own machine, working with real folders and files, downloading data and moving it around, etc. – all the things you will be doing as a real data scientist in the real world. Enough talk. Let’s go. Click on “Setting up your computer” and let’s get to work. Who are we? Datatrain (www.datatrain.global) is a project of Databrew (www.databrew.cc). "],["setting-up-your-computer.html", "Module 2 Setting up your computer Install R Install RStudio Install packages", " Module 2 Setting up your computer It’s time to set up your system. Ready? Let’s go. Install R First, let’s get the right programs installed on your computer. Then we will explain what they are and why you need them. First, download and install R: Go to the following website, click the Download button, and follow the website’s instructions from there. https://mirrors.nics.utk.edu/cran/ Install RStudio Second, download and install RStudio: Go to the following website and choose the free Desktop version: https://rstudio.com/products/rstudio/download/ Third, make sure RStudio opens successfully: Open the RStudio app. A window should appear that looks like this: Fourth, make sure R is running correctly in the background: In RStudio, in the pane on the left (the “Console”), type 2+2 and hit Enter. If R is working properly, the number “4” will be printed in the next line down. Finally, some minor adjustments to make RStudio run smoother (and look cooler): Go to Tools &gt; Global Options and make sure your General settings match these exactly: Specifically, uncheck the option under Workspace to ‘Restore .RData into workspace at startup.’ Now go to the Appearance settings and choose a cool theme! Boom! You’ve got R up and running. Now it’s time to install some packages. Install packages Packages are what makes R so great. To install a package, open Rstudio and type the following code into the “Console” in the bottom left Did that work? Probably not, because “packagename” is not a real R package. The packages we’ll be using are the following: tidyverse RColorBrewer leaflet ggthemes rmarkdown sp To install all of these, you can run install.packages for each package: So, now you’ve got R, RStudio, and some cool packages. Good job. You’re ready for the next module. "],["first-code.html", "Module 3 First code Scripts and your workspace R as a calculator Re-running code Incomplete commands Getting errors Using parentheses Use built-in R functions R and RStudio: what’s the difference? Two-minute tour of RStudio", " Module 3 First code Are you ready to write some code? I hope so, because it’s time. Scripts and your workspace In RStudio, click “File” in the upper left and then “New file -&gt; R Script”. This will open a window pane in the upper left of your screen. This “script” is basically a place for you to write and save code. Got it? Good. Now click “File” then “Save as” and then save your script locally somewhere where you’ll remember it. For example, you could save it on your “Desktop” as a file named “firstcode.R”. Your workspace consists of: Your script (upper left). This is where you talk to R. The console (bottom left). This is where R talks back to you. The “environment” (upper right). This is a place where you can explore data “objects” you’ve created (don’t worry, we’ll get there). The “plots” tab (bottom right). This is where you’ll see outputs of charts, maps, etc. R as a calculator At its most basic, R is a big calculator. Or a conversation partner. However you like to think of it. You talk to R by typing some code in your script (upper left), and R talks back by printing something in the console (bottom left). For example, if you want to ask R what two plus two is, you’d write this on line one of your script. 2 + 2 Then, if you place your cursor on that line and run “ctrl + enter” (or “cmd + enter” if on Mac), that code will “run” and R will give you the response. [1] 4 Cool, huh? You can, of course, type more complex math problems. Try typing the following on line 2: 10392 * (13/72)^2 - sqrt(9.123) + (475/2.2)^3 Did you get the below as an answer? [1] 10065313 Good. As you can see, some calculations are pretty straightforward, like addition (+), subtraction (-), division (/), and even multiplication (*). 4 + 4 4 - 3 12 / 6 10 * 10 You can even perform calculations with negative numbers. 96 + -2 And exponents can be denoted like this. 2 ^2 100 ^5 Make sure you have run all of these in your computer. Done? Great, that’s R as a calculator. Re-running code Sometimes you may want to re-run a line of code that you just ran or to recall code so that you can adjust it slightly. Click anywhere in the Console and then press your keyboard’s Up arrow. That line of code that appears in your Console is the last line of code you just ran. Good work! Try clicking the Up arrow three times. Do you see the line of code that you ran three times ago? Yes you do. That’s because R keeps a history of everything you have said to it since you opened this window. So if you keep pressing your Up arrow, R will show you all of the lines of code you previously ran. If you don’t want this old command, simply press Escape to reset the Console’s command line, and now you’re ready to re-run code in the Console. Incomplete commands Similar to talking to a friend, if you start a sentence and don’t finish it, your friend will get confused. R gets confused when you enter an incomplete command and will wait for you to finish it in the Console before doing anything. For example, try running this code in your Console: 45 - Is R giving you a little + sign on the line under your command? That’s because it is waiting for you to complete your command. If you want to complete it, add a number (e.g., 3) and hit Enter. You should now be given an answer (e.g., 42). Or, if instead you want R to stop waiting and stop running, just press the Escape key Getting errors Our commands can’t only be complete, but they need to follow the rules of R. We know that if the command is incomplete that R will give us a + sign, but what about when we don’t follow the rules of R? Try running this code in your Console: 4 + y You probably received a message in red font stating: Error: object ‘y’ not found. That is because R did know how to interpret the symbol y in this case, so it just gave up. If R does not understand your code, it will throw an error and give up on trying to execute that line of code but don’t be deterred when you see an error! They happen all the time, even to the professionals. The only thing we can do is read your code, find the errors, and fix them. Here’s another piece of code that will produce an error (just for fun): dfjkltr9fitwt985ut9e3 Using parentheses Another rule of R pertains to parentheses. Exactly how it is done in math, you can use parentheses to exert control over the order in which you perform calculations. For example, these two commands produce different results: 2*7 - 2*5 / 2 [1] 9 (2*7 - 2*5) / 2 [1] 2 Note parentheses need to come in pairs: whenever you type an open parenthesis, (eventually you need to provide a corresponding closed parenthesis). A very common way to get errors is by missing a parentheses. For instance, the following line of code will return a plus sign (+) since R is waiting for you to close the parenthetical before it processes your command: 4 + (5 No matter how many parenthesis you have always close your parenthesis. Based on this which of the below is correct and why? (((5+5))) (((5+5)) So lesson is… always close your parentheses even for the funny ones like {…} and […]. Use built-in R functions R has some built-in “functions” for common calculations. Rather than defining a function let’s just do some. Let’s find the square-root of a number using the ‘squirt’ command, sqrt(): sqrt(16) [1] 4 Note the use of parentheses here. When you are calling a function, when you see parentheses, think of the word ‘of’. This line translates to ‘the square root of 16’. You are taking the sqrt of the number inside the parenthetical. Let’s try again with a different function. Find: the log of 4. log(4) [1] 1.386294 Note that the function log() is the natural log function (i.e., the value that e must be raised to in order to equal 4). To calculate a base-10 logarithm, use log10( ). log(10) [1] 2.302585 log10(10) [1] 1 Another handy function is round(), for rounding numbers to a specific number of decimal places. 100/3 round(100/3) round(100/3,digits=1) round(100/3,digits=2) round(100/3,digits=3) Finally, R also comes with some built-in values, such as pi: pi So now that you have used a few functions, let’s define it. A function is a package of code that does the following: takes a given value, transforms it according to some internal code instructions, and provides an output. You will learn more about functions later, but this is a good intro. R and RStudio: what’s the difference? These two entities are similar, but it is important to understand how they are different. In short, R is an open-source (i.e., free) coding language: a powerful programming engine that can be used to do really cool things with data. R Studio, in contrast, is a free user interface that helps you interact with R. If you think of R as an engine, then it helps to think of RStudio as the car that makes it easier and more comfortable to use the engine to get where you want to go. RStudio needs R in order to function, but R can technically be used on its own outside of RStudio if you want. However, just as a good car mechanic can get an engine to run without being installed within a car, using R on its own is a bit clunky and requires some expertise. For beginners (and everyone else, really), R is just so much more pleasant to use when you are operating it from within RStudio. RStudio als has increasingly powerful features that make R even more useful and versatile in data science. For instance you can make an interactive data dashboard, beautifyl and reproducible data reports, presentations, websites, and even this book! And new features are regularly being added to RStudio by its all-star team of data scientists. That’s why we will always use RStudio´ when working withR` in this book. Two-minute tour of RStudio When you open RStudio, you will see a window that looks like the screenshot below: Console You are already acquainted with RStudio’s Console, the window pane on the left that you use to “talk” to R. Environment In the top right pane, the Environment, RStudio will maintain a list of all the datasets, variables, and functions that you are using as you work. The next modules will explain what variables and functions are. Files, Plots, Packages, &amp; Help You will use the bottom right pane very often. The Files tab lets you see all the files within your working directory, which will be explained in the section below. The Plots tab lets you see the plots you are producing with your code. The Packages tab lets you see the packages you currently have installed on your computer. Packages are bundles of R functions downloaded from the internet; they will be explained in detail a few modules down the road. The Help tab is very important! It lets you see documentation (i.e., user’s guides) for the functions you use in your code. Functions will also be explained in detail a few modules down the road. These three panes are useful, but the most useful window pane of all is actually missing when you first open RStudio. This important pane is where you work with scripts. "],["in-class-survey.html", "Module 4 In-class survey", " Module 4 In-class survey Open a new R script and name it survey.R Write code to load the following libraries: dplyr, readr, and ggplot2 Error in library(gsheets): there is no package called &#39;gsheets&#39; Fill out the survey at https://forms.gle/TRKuQ2in47zBk7Qt9. Once everybody is done, read in the survey by running the below: if(&#39;survey.RData&#39; %in% dir()){ load(&#39;survey.RData&#39;) } else { survey &lt;- gsheet::gsheet2tbl(&#39;https://docs.google.com/spreadsheets/d/1Uq_F6SmDOH1q5AZaxcGOIJnO-2DKdc_HUSw3akXpI3w/edit?usp=sharing&#39;) save(survey, file = &#39;survey.RData&#39;) } Run the below code to process the data a bit names(survey) &lt;- c( &#39;timestamp&#39;, # &#39;Timestamp&#39;, &#39;name&#39;, #&#39;What is your name?&#39;, &#39;email&#39;, #&#39;What is your email address?&#39;, &#39;experience&#39;, #&#39;How much experience do you have in R?&#39;, &#39;alcohol&#39;, #&#39;How many alcoholic beverages do you drink per week?&#39;, &#39;squat&#39;, #&#39;How long do you think you can hold a wall squat (seconds)? (ie, the &quot;imaginary chair&quot;)&#39;, &#39;egypt_or_france&#39;, #&#39;Would you rather visit the pyramids of Egypt or the Eiffel tower of Paris?&#39;, &#39;bike&#39;, #&#39;Do you know how to ride a bike?&#39;, &#39;swim&#39;, #&#39;Do you know how to swim?&#39;, &#39;age&#39;, #&#39;How old are you in years?&#39;, &#39;origin&#39;, #&#39;Where are you from?&#39;, &#39;swahili&#39;, #&#39;Do you know how to speak Swahili?&#39;, &#39;height&#39;, #&#39;How tall are you in centimeters?&#39;, &#39;shoe&#39;, #&#39;What size shoe do you wear (EU sizes)?&#39;, &#39;hand&#39;, #&#39;Are you right-handed or left-handed?&#39;, &#39;happy&#39;, #&#39;How happy do you consider yourself on a scale from 1 to 5, with 1 being extremely unhappy, 5 being extremely happy, and 3 being the average person&#39;, &#39;gender&#39;, #&#39;What is your gender?&#39;, &#39;sing&#39;, #&#39;Do you consider yourself better or worse than average at singing?&#39;, &#39;dance&#39;, #&#39;Do you consider yourself better than average at dancing?&#39;, &#39;sleep&#39;, #&#39;How many hours did you sleep last night?&#39;, &#39;net&#39;, #&#39;Did you sleep under a mosquito net last night?&#39;, &#39;eat&#39;, #&#39;Would you rather eat&#39;, &#39;money_or_love&#39;, #&#39;What is better, money or love?&#39;, &#39;pizza_or_love&#39;, #&#39;What is better, pizza or love?&#39;, &#39;adjective&#39;, #&#39;What is the one adjective that best describes you&#39;, &#39;siblings&#39;) #&#39;How many brothers and sisters do you have?&#39;) Ask some questions to the data. Answer them through charts and tables. "],["exploring-a-dataset.html", "Module 5 Exploring a dataset", " Module 5 Exploring a dataset Let’s explore a dataset that consists of people who died and survived during a major event. Maybe, you can even guess the event. Open a new R script and name it survival.R Write code to load the following libraries: dplyr, readr, and ggplot2 Read in the data by running the following: people &lt;- readr::read_csv(&#39;https://datatrain.cc/data/survival.csv&#39;) How many columns are in the data? What are the names of the columns in the data? How many rows are in the data? Write code to look at just the first few rows of the data. Write code to look at just the last few rows of the data. What do you suppose the survived variable refers to? Re-order the dataset by age, from youngest to oldest. How old was the youngest person in the dataset? Re-order the dataset by age, from oldest to youngest. How old was the oldest person in the dataset? How many males are there in the dataset? How many females are there in the dataset? What percentage of the dataset is female? How many people survived? How many people died? What percentage of the people died? How many males survived? How many females died? What percentage of males died? What percentage of people who died were male? What percentage of people who survived were male? What percentage of people who died were female? How many people were in each class? How many people from each class survived and died? What percentage of people from each class died? What is the age of the youngest survivor? What is the age of the oldest survivor? What is the age of the youngest surviving male? What is the sex of the oldest person who died? What is the average of age of females who died? What is the average age of males who survived? Make a table showing the exact number of people that died and survived, grouping also by class and sex. Create a variable named outcome. Populate this variable with the characters “survived” or “died” depending on the survived variable. Make another variable called age_group. If the person is over 18, call them “adult”; otherwise, call them “child”. Make another variable called person_type. Use paste0 to combine the sex and age_group variables, in that order. Make another variable called initial. This should be the first letter of each person’s last name. Hint, use substr. What is the most prevalent initial in the dataset? What is the least prevalent second letter in people’s last names? Use nchar to calculate the number of letters in each person’s name, and make a variable with that value named name_length. Who has the longest name in the dataset? Who has the shortest name in the dataset? Make a variable called above_average_name_length. This should be TRUE if the person’s name length is above average, and false if below or at average. Who is more likely to have survived: those with short names, or those with long names. What is the age of the female with the shortest name who survived? What is the sex of the oldest person to have died who had an above average name length? Who, on average, has shorter names: males or females? What is the total number of characters in all female names, and all male names? Make a histogram of the age of people. Make a barchart of the class of people. Make a barchart of the outcome variable. Make a scatterplot of the name_length and age variables. Make a chart showing the age of males and females separately. Make a chart showing survivorship by sex. Make a chart showing survivorship by age. Make a chart showing the age, sex, and survivor status of people. Make a chart showing the distribution of the lengh of people’s names. Assume that the average life expectancy is 80. How many years of life were lost due to this event? How many years of life lost were attributible to males? How many to females? Make three more charts. What caused this event? "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
