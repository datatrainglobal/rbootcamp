[["index.html", "R Bootcamp Module 1 Welcome What is this website? Who are we?", " R Bootcamp Module 1 Welcome What is this website? This is not a textbook or an encyclopedia. This is not a reference manual. It is not exhaustive or comprehensive. We barely mention statistical tests at all. There is almost no theory. In fact, this curriculum is biased, non-representative, and incomplete – by design. So what is this? This website is a guide designed to help you through the most dangerous period in your data science education: your very first steps. The first few weeks. That is when 99% percent of people give up on learning to code. You want to be part of the 1%? Okay, then you need to understand these 3 things: Premise 1: We learn best by doing. Our goal is to get you doing data science. We will keep theory and detail to a minimum. We will give you the absolute basics, then offer you exercises and puzzles that motivate you to learn the rest. Then, once you’ve been doing data science for a bit, you soon begin thinking like a data scientist. By that, we mean tackling ambiguous problems with persistence, independence, and creative problem solving. With the focus on doing (as opposed to listening, reading, watching, etc.), the burden is on you. You gotta do the work. Premise 2: We learn best with purpose. Once you gain comfort with the basic skills, you will be able to start working on real data, for real projects, with real impact. You will start to care about what you are coding. And that is when the learning curve skyrockets – because you are motivated, and because you are learning reactively, instead of preemptively. Our goal is to get you to the point of take-off as quickly as possible. Premise 3: A simple toolbox is all you need to build a house. Once you become comfortable with a few basic coding tools, you can build pretty much anything. The toolbox doesn’t need to be that big; if you know how to use your tools well, and if you have enough building supplies (i.e., data), the possibilities are limitless. One more thing that this is not: This is not a fancy interactive tutorial with bells or whistles. We purposefully designed this to be simple and “analog”. You will not be typing your code into this website and getting feedback from a robot, or setting up an account to track your progress, or getting pretty merit badges or points when you complete each module. Instead, you will be doing your work on your own machine, working with real folders and files, downloading data and moving it around, etc. – all the things you will be doing as a real data scientist in the real world. Enough talk. Let’s go. Click on “Setting up your computer” and let’s get to work. Who are we? Datatrain (www.datatrain.global) is a project of Databrew (www.databrew.cc). "],["setting-up-your-computer.html", "Module 2 Setting up your computer Install R Install RStudio Install packages", " Module 2 Setting up your computer It’s time to set up your system. Ready? Let’s go. Install R First, let’s get the right programs installed on your computer. Then we will explain what they are and why you need them. First, download and install R: Go to the following website, click the Download button, and follow the website’s instructions from there. https://mirrors.nics.utk.edu/cran/ Install RStudio Second, download and install RStudio: Go to the following website and choose the free Desktop version: https://rstudio.com/products/rstudio/download/ Third, make sure RStudio opens successfully: Open the RStudio app. A window should appear that looks like this: Fourth, make sure R is running correctly in the background: In RStudio, in the pane on the left (the “Console”), type 2+2 and hit Enter. If R is working properly, the number “4” will be printed in the next line down. Finally, some minor adjustments to make RStudio run smoother (and look cooler): Go to Tools &gt; Global Options and make sure your General settings match these exactly: Specifically, uncheck the option under Workspace to ‘Restore .RData into workspace at startup.’ Now go to the Appearance settings and choose a cool theme! Boom! You’ve got R up and running. Now it’s time to install some packages. Install packages Packages are what makes R so great. To install a package, open Rstudio and type the following code into the “Console” in the bottom left Did that work? Probably not, because “packagename” is not a real R package. The packages we’ll be using are the following: tidyverse RColorBrewer leaflet ggthemes rmarkdown sp To install all of these, you can run install.packages for each package: So, now you’ve got R, RStudio, and some cool packages. Good job. You’re ready for the next module. "],["first-code.html", "Module 3 First code File paths Scripts and your workspace R as a calculator Re-running code Incomplete commands Getting errors Using parentheses Use built-in R functions Objects and vectors Exercises R and RStudio: what’s the difference? Two-minute tour of RStudio", " Module 3 First code Are you ready to write some code? I hope so, because it’s time. File paths Good organization is the key to success, so let’s start by creating a folder for all of your DataLab work. … now that you’ve done this, REMEMBER WHERE YOUR FOLDER IS AND STAY ORGANIZED!! Scripts and your workspace In RStudio, click “File” in the upper left and then “New file -&gt; R Script”. This will open a window pane in the upper left of your screen. This “script” is basically a place for you to write and save code. Got it? Good. Now click “File” then “Save as” and then save your script locally somewhere where you’ll remember it. For example, you could save it on your “Desktop” as a file named “firstcode.R”. Your workspace consists of: Your script (upper left). This is where you talk to R. The console (bottom left). This is where R talks back to you. The “environment” (upper right). This is a place where you can explore data “objects” you’ve created (don’t worry, we’ll get there). The “plots” tab (bottom right). This is where you’ll see outputs of charts, maps, etc. R as a calculator At its most basic, R is a big calculator. Or a conversation partner. However you like to think of it. You talk to R by typing some code in your script (upper left), and R talks back by printing something in the console (bottom left). For example, if you want to ask R what two plus two is, you’d write this on line one of your script. 2 + 2 Then, if you place your cursor on that line and run “ctrl + enter” (or “cmd + enter” if on Mac), that code will “run” and R will give you the response. [1] 4 Cool, huh? You can, of course, type more complex math problems. Try typing the following on line 2: 10392 * (13/72)^2 - sqrt(9.123) + (475/2.2)^3 Did you get the below as an answer? [1] 10065313 Good. As you can see, some calculations are pretty straightforward, like addition (+), subtraction (-), division (/), and even multiplication (*). 4 + 4 4 - 3 12 / 6 10 * 10 You can even perform calculations with negative numbers. 96 + -2 And exponents can be denoted like this. 2 ^2 100 ^5 Make sure you have run all of these in your computer. Done? Great, that’s R as a calculator. Re-running code Sometimes you may want to re-run a line of code that you just ran or to recall code so that you can adjust it slightly. Click anywhere in the Console and then press your keyboard’s Up arrow. That line of code that appears in your Console is the last line of code you just ran. Good work! Try clicking the Up arrow three times. Do you see the line of code that you ran three times ago? Yes you do. That’s because R keeps a history of everything you have said to it since you opened this window. So if you keep pressing your Up arrow, R will show you all of the lines of code you previously ran. If you don’t want this old command, simply press Escape to reset the Console’s command line, and now you’re ready to re-run code in the Console. Incomplete commands Similar to talking to a friend, if you start a sentence and don’t finish it, your friend will get confused. R gets confused when you enter an incomplete command and will wait for you to finish it in the Console before doing anything. For example, try running this code in your Console: 45 - Is R giving you a little + sign on the line under your command? That’s because it is waiting for you to complete your command. If you want to complete it, add a number (e.g., 3) and hit Enter. You should now be given an answer (e.g., 42). Or, if instead you want R to stop waiting and stop running, just press the Escape key Getting errors Our commands can’t only be complete, but they need to follow the rules of R. We know that if the command is incomplete that R will give us a + sign, but what about when we don’t follow the rules of R? Try running this code in your Console: 4 + y You probably received a message in red font stating: Error: object ‘y’ not found. That is because R did know how to interpret the symbol y in this case, so it just gave up. If R does not understand your code, it will throw an error and give up on trying to execute that line of code but don’t be deterred when you see an error! They happen all the time, even to the professionals. The only thing we can do is read your code, find the errors, and fix them. Here’s another piece of code that will produce an error (just for fun): dfjkltr9fitwt985ut9e3 Using parentheses Another rule of R pertains to parentheses. Exactly how it is done in math, you can use parentheses to exert control over the order in which you perform calculations. For example, these two commands produce different results: 2*7 - 2*5 / 2 (2*7 - 2*5) / 2 Note parentheses need to come in pairs: whenever you type an open parenthesis, (eventually you need to provide a corresponding closed parenthesis). A very common way to get errors is by missing a parentheses. For instance, the following line of code will return a plus sign (+) since R is waiting for you to close the parenthetical before it processes your command: 4 + (5 No matter how many parenthesis you have always close your parenthesis. Based on this which of the below is correct and why? (((5+5))) (((5+5)) So lesson is… always close your parentheses even for the funny ones like {…} and […]. Use built-in R functions R has some built-in “functions” for common calculations. Rather than defining a function let’s just do some. Let’s find the square-root of a number using the ‘squirt’ command, sqrt(): sqrt(16) Note the use of parentheses here. When you are calling a function, when you see parentheses, think of the word ‘of’. This line translates to ‘the square root of 16’. You are taking the sqrt of the number inside the parenthetical. Let’s try again with a different function. Find: the log of 4. log(4) Note that the function log() is the natural log function (i.e., the value that e must be raised to in order to equal 4). To calculate a base-10 logarithm, use log10( ). log(10) log10(10) Another handy function is round(), for rounding numbers to a specific number of decimal places. 100/3 round(100/3) round(100/3,digits=1) round(100/3,digits=2) round(100/3,digits=3) Finally, R also comes with some built-in values, such as pi: pi So now that you have used a few functions, let’s define it. A function is a package of code that does the following: takes a given value, transforms it according to some internal code instructions, and provides an output. You will learn more about functions later, but this is a good intro. Objects and vectors R can do so much more than be just a calculator. Your first step in uncovering the potential of R is to make variables. All things variables To assign numbers or other types of data to a variable, you use the &lt; and - characters to make the arrow symbol &lt;-. x &lt;- 1 y &lt;- 2 Where did those values go? You do not see the numbers printed in the Console because the values were stored in the variables x, and y. These are now in the Environment. So how do we use or see these variables? If you want R to tell you what x is, just type the variable name and run it. x If you want to do calculations with the variables then do it. x + 100 x * 2 x + y If you want to do calculations with variables and make that answer into a new variable, you can do that too. z &lt;- x + y - 1 In R, a variable is another way to refer to value. That value can be as simple as a single number (e.g., 6) or as complex as a spreadsheet with thousands of rows and columns. Think of a variable as a cup; just as cups make it easy to hold your coffee and carry it from the kitchen to the couch, variables make it easy to contain and work with data. Let’s make a new variable from x that isn’t just one value but is multiple values. a &lt;- rep(x, 5) How do you look at the response of a again? What does it look like the rep() function does? Since a isn’t just a single value, we can do some cool things, like find how many values are in the variable: length(a) Let’s create a vector, which is very similar to what we did above, and do some calculations: b &lt;- c(1,2,3) b + 100 b * 2 Good work! You’re a master of this. So let’s make it interesting. Let’s look at some various ages. To start we need to make a new vector and give it a name, however A variable/vector name has to have at least one letter in it, A variable/vector name has to be connected. AKA no spaces. Instead of a space try a period ( . ) or an underscore ( _ ). Note: hyphens cannot be used, There are some other rules, but we can learn them as we go so let’s jump in and create a variable with some ages and find out some information about these ages. ages &lt;- c(20, 30, 25, 35) mean(ages) max(ages) min(ages) median(ages) summary(ages) Now, in data it is super common to have NAs so let’s make a vector called ages but introduce an NA and re-do all those functions. Does it work? ages &lt;- c(20, 30, 25, 35, NA, 28) mean(ages) It doesn’t work! Well what if we try this: ages &lt;- c(20, 30, 25, 35, NA, 28) mean(ages, na.rm = TRUE) Did it work? Of course it did because you’re a genius! But more importantly it actually worked because the na.rm = TRUE is removing the NA. We are saying “take the mean of ages and remove the NAs.” What happens if we set na.rm to FALSE? mean(ages, na.rm = FALSE) Why didn’t this work? This is because we said “take the mean of ages and do not remove the NAs.” We can’t know the mean of ages when we are missing an age, so we need to remove the unknown in order to be able to do a calculation. Try the na.rm with the calculations we performed above. max(ages, na.rm = TRUE) min(ages, na.rm = TRUE) median(ages, na.rm = TRUE) summary(ages, na.rm = TRUE) Another interesting feature is that we can do comparisons like greater than and smaller than in R. Let’s compare one age with many ages. old_threshold &lt;- 30 ages &gt; old_threshold ages &lt; old_threshold table(ages &gt; old_threshold) This can be very useful right? Let’s make an even larger vector and learn some tricks to do so. Sometimes it can be hard to type out each individual number hundreds of times so let’s take a look below at what are some other ways to look at vectors. a &lt;- c(1, 2, 3, 4, 5, 6, 7) b &lt;- 1:1000 d &lt;- seq(0, 1000000, by = 10000) length(d) Up until this point we have focused on numbers which are numeric, but we can also work with words which we refer to as strings. Let’s create a vector with some names of people and call it people and explore the names. Note: while you may want to name it names, R already has a function called names, and we want to avoid naming variables and vectors after functions. Just like we don’t want to make a variable called mean or min. people &lt;- c(&#39;Michael&#39;, &#39;Nika&#39;, &#39;Delana&#39;) people == &#39;Matthew&#39; people == &#39;Nika&#39; table(people == &#39;Nika&#39;) &#39;John&#39; %in% people &#39;John&#39; == people Exercises Use R like a calculator 1. Type a command in the Console to determine the sum of 596 and 198. 2. Re-run the sum of 596 and 198 without re-typing it. 3. Recall the command again, but this time adjust the code to find the sum of 596 and 298. 4. Practice escaping an accidentally called command: recall your most recent command, then press the right key to clear the Console’s command line.   Recalling commands 5. Find the sum of the ages of everyone in your immediate family. 6. Now recall that command and adjust it to determine the average age of the members of your family. 7. Find the square root of pi and round the answer to the 2 decimal places.   Finding errors 8. This line of code won’t run; instead, R will wait for more with a + symbol. Find the problem and re-write the code so that it works. 5 * 6 + 9. The same goes for this line of code. Fix it, too. sqrt(16 10. This line of code will trigger an error. Find the problem and re-write the code so that it works. round(100/3,digits+3) 11. Type a command of your own into R that throws an error, then recall the command and revise so that R can understand it.   Show that the following statements are TRUE: 12. pi is greater than the square root of 9 13. It is FALSE that the square root of 9 is greater than pi 14. pi rounded to the nearest whole number equals the square root of 9   Asking TRUE / FALSE questions 15. Write and run a line of code that asks whether these two calculations return the same result: 2*7 - 2*5 / 2 (2*7 - 2*5) / 2 [1] 2 16. Now write and run a line of code that asks whether the first calculation is larger than the second:   R and RStudio: what’s the difference? These two entities are similar, but it is important to understand how they are different. In short, R is an open-source (i.e., free) coding language: a powerful programming engine that can be used to do really cool things with data. R Studio, in contrast, is a free user interface that helps you interact with R. If you think of R as an engine, then it helps to think of RStudio as the car that makes it easier and more comfortable to use the engine to get where you want to go. RStudio needs R in order to function, but R can technically be used on its own outside of RStudio if you want. However, just as a good car mechanic can get an engine to run without being installed within a car, using R on its own is a bit clunky and requires some expertise. For beginners (and everyone else, really), R is just so much more pleasant to use when you are operating it from within RStudio. RStudio als has increasingly powerful features that make R even more useful and versatile in data science. For instance you can make an interactive data dashboard, beautifyl and reproducible data reports, presentations, websites, and even this book! And new features are regularly being added to RStudio by its all-star team of data scientists. That’s why we will always use RStudio´ when working withR` in this book. Two-minute tour of RStudio When you open RStudio, you will see a window that looks like the screenshot below: Console You are already acquainted with RStudio’s Console, the window pane on the left that you use to “talk” to R. Environment In the top right pane, the Environment, RStudio will maintain a list of all the datasets, variables, and functions that you are using as you work. The next modules will explain what variables and functions are. Files, Plots, Packages, &amp; Help You will use the bottom right pane very often. The Files tab lets you see all the files within your working directory, which will be explained in the section below. The Plots tab lets you see the plots you are producing with your code. The Packages tab lets you see the packages you currently have installed on your computer. Packages are bundles of R functions downloaded from the internet; they will be explained in detail a few modules down the road. The Help tab is very important! It lets you see documentation (i.e., user’s guides) for the functions you use in your code. Functions will also be explained in detail a few modules down the road. These three panes are useful, but the most useful window pane of all is actually missing when you first open RStudio. This important pane is where you work with scripts. "],["in-class-survey.html", "Module 4 In-class survey Exploring data R as a calculator dplyr", " Module 4 In-class survey Open a new R script and name it survey.R Write code to load the following libraries: dplyr, readr, and ggplot2 Fill out the survey at https://docs.google.com/forms/d/e/1FAIpQLSf_-POnYlMPAJO-RJxfbrZef6q9YAEQuPMb3qIBfcmizAkZAw/viewform?usp=sf_link. Once everybody is done, read in the survey by running the below: survey &lt;- gsheet::gsheet2tbl(&#39;https://docs.google.com/spreadsheets/d/1Ra5LhxdCRbmEp-wV07ZlREDt3gysBgyUG4AWuaa1pzk/edit?usp=sharing&#39;) Run the below code to process the data a bit names(survey) &lt;- c( &#39;timestamp&#39;, # &quot;Timestamp&quot;, &#39;name&#39;, # &quot;What is your name?&quot;, &#39;experience&#39;, # &quot;How much experience do you have in R?&quot;, &#39;soda&#39;, # &quot;How many sodas do you drink a week?&quot;, &#39;squat&#39;, # &quot;How long do you think you can hold a wall squat (seconds)? (ie, the &#39;imaginary chair&#39;)?&quot;, &#39;egypt_or_france&#39;, # &quot;Would you rather visit the pyramids of Egypt or the Eiffel tower of Paris?&quot;, &#39;bike&#39;, # &quot;Do you know how to ride a bike?&quot;, &#39;swim&#39;, # &quot;Do you know how to swim?&quot;, &#39;age&#39;, # &quot;How old are you in years?&quot;, &#39;where&#39;, # &quot;Where do you live?&quot;, &#39;lng&#39;, # &quot;What is the longitude of your hometown?&quot;, &#39;lat&#39;, # &quot;What is the latitude of your hometown?&quot;, &#39;language&#39;, # &quot;Do you know how to speak another language aside from English?&quot;, &#39;height&#39;, # &quot;How tall are you in inches?&quot;, &#39;shoe&#39;, # &quot;What size shoe do you wear? (US Size)&quot;, &#39;hand&#39;, # &quot;Are you right-handed or left-handed?&quot;, &#39;happy&#39;, # &quot;How happy do you consider yourself on a scale from 1 to 5, with 1 being extremely unhappy, 5 being extremely happy, and 3 being the average person?&quot;, &#39;sing&#39;, # &quot;Do you consider yourself better or worse than average at singing?&quot;, &#39;pizza_or_love&#39;, # &quot;What&#39;s more important pizza or love?&quot;, &#39;dance&#39;, # &quot;Do you consider yourself better than average at dancing?&quot;, &#39;sleep&#39;, # &quot;How many hours did you sleep last night&quot;, &#39;eat&#39;, # &quot;Would you rather eat&quot;, &#39;adjective&#39;, # &quot;What is the one adjective that best describes you?&quot;, &#39;teeth&#39;, # &quot;How many teeth do you have?&quot;, &#39;braces&#39;, # &quot;If you had to have braces the rest of your life, which color would you choose?&quot;, &#39;siblings&#39;, # &quot;How many siblings do you have?&quot;, &#39;wrestle&#39;, # &quot;Of the people in this room, who would win a pinky wrestle against Michael?&quot;, &#39;hangout&#39;, # &quot;What is the best place to hang out in Sewanee?&quot;, &#39;movies&#39;, # &quot;How many movies have you watched in the last month?&quot; &#39;dob&#39; # &quot;What is your date of birth?&quot; ) Run the following code to inspect the data View( survey ) Exploring data How many columns are in the data? What are the names of the columns in the data? How many rows are in the data? Write code to look at just the first few rows of the data. Write code to look at just the last few rows of the data. How many people can ride a bike? Cannot ride a bike? How many people can swim? Cannot swim? How many teeth do people have? How happy are people? R as a calculator What is the average number of teeth per person? What are the minimum and maximum number of teeth per person? What are the average and median heights? What percentage of people can ride a bike? Cannot ride a bike? What percentage of people think that pizza is more important than love? Summarize how much people slept last night. Summarize how many sodas people drink per week. dplyr Get in groups of two. Create 3 questions to ask of this survey data, each of which involves at least 2 variables. "],["exploring-a-dataset.html", "Module 5 Exploring a dataset dplyr ggplot2", " Module 5 Exploring a dataset Let’s explore a dataset that consists of people who died and survived during a major event. Maybe you can even guess the event! Open a new R script and name it survival.R Write code to load the following libraries: dplyr, readr, and ggplot2 Read in the data by running the following: people &lt;- readr::read_csv(&#39;https://datatrain.cc/data/survival.csv&#39;) dplyr How many columns are in the data? What are the names of the columns in the data? How many rows are in the data? Write code to look at just the first few rows of the data. Write code to look at just the last few rows of the data. What do you suppose the survived variable refers to? Re-order the dataset by age, from youngest to oldest. How old was the youngest person in the dataset? Re-order the dataset by age, from oldest to youngest. How old was the oldest person in the dataset? How many males are there in the dataset? How many females are there in the dataset? What percentage of the dataset is female? How many people survived? How many people died? What percentage of the people died? How many males survived? How many females died? What percentage of males died? What percentage of people who died were male? What percentage of people who survived were male? What percentage of people who died were female? How many people were in each class? How many people from each class survived and died? What percentage of people from each class died? What is the age of the youngest survivor? What is the age of the oldest survivor? What is the age of the youngest surviving male? What is the sex of the oldest person who died? What is the average of age of females who died? What is the average age of males who survived? Make a table showing the exact number of people that died and survived, grouping also by class and sex. Create a variable named outcome. Populate this variable with the characters “survived” or “died” depending on the survived variable. Make another variable called age_group. If the person is over 18, call them “adult”; otherwise, call them “child”. Make another variable called person_type. Use paste0 to combine the sex and age_group variables, in that order. Make another variable called initial. This should be the first letter of each person’s last name. Hint, use substr. What is the most prevalent initial in the dataset? What is the least prevalent second letter in people’s last names? Use nchar to calculate the number of letters in each person’s name, and make a variable with that value named name_length. Who has the longest name in the dataset? Who has the shortest name in the dataset? Make a variable called above_average_name_length. This should be TRUE if the person’s name length is above average, and false if below or at average. Who is more likely to have survived: those with short names, or those with long names. What is the age of the female with the shortest name who survived? What is the sex of the oldest person to have died who had an above average name length? Who, on average, has shorter names: males or females? What is the total number of characters in all female names, and all male names? ggplot2 Make a histogram of the age of people. Make a barchart of the class of people. Make a barchart of the outcome variable. Make a scatterplot of the name_length and age variables. Make a chart showing the age of males and females separately. Make a chart showing survivorship by sex. Make a chart showing survivorship by age. Make a chart showing the age, sex, and survivor status of people. Make a chart showing the distribution of the lengh of people’s names. Assume that the average life expectancy is 80. How many years of life were lost due to this event? How many years of life lost were attributible to males? How many to females? Make three more charts. What caused this event? "],["visualizing-data-with-ggplot2.html", "Module 6 Visualizing data with ggplot2 Introduction to ggplot2 Demography exercises Gapminder exercises Exercises with world health data", " Module 6 Visualizing data with ggplot2 Introduction to ggplot2 Tables and summary statistics are fine, but a good visualization is even better! This is where the tidyverse shines, so it’s time to learn how to use its fantastic visualization package, ggplot2. 1. Open a new R script and name it ggplot.R. 2. Write code to load the tidyverse. 3. Load our survey data and clean things up a bit: survey &lt;- gsheet::gsheet2tbl(&#39;https://docs.google.com/spreadsheets/d/1Ra5LhxdCRbmEp-wV07ZlREDt3gysBgyUG4AWuaa1pzk/edit?usp=sharing&#39;) names(survey) &lt;- c( &#39;timestamp&#39;, # &quot;Timestamp&quot;, &#39;name&#39;, # &quot;What is your name?&quot;, &#39;experience&#39;, # &quot;How much experience do you have in R?&quot;, &#39;soda&#39;, # &quot;How many sodas do you drink a week?&quot;, &#39;squat&#39;, # &quot;How long do you think you can hold a wall squat (seconds)? (ie, the &#39;imaginary chair&#39;)?&quot;, &#39;egypt_or_france&#39;, # &quot;Would you rather visit the pyramids of Egypt or the Eiffel tower of Paris?&quot;, &#39;bike&#39;, # &quot;Do you know how to ride a bike?&quot;, &#39;swim&#39;, # &quot;Do you know how to swim?&quot;, &#39;age&#39;, # &quot;How old are you in years?&quot;, &#39;where&#39;, # &quot;Where do you live?&quot;, &#39;lng&#39;, # &quot;What is the longitude of your hometown?&quot;, &#39;lat&#39;, # &quot;What is the latitude of your hometown?&quot;, &#39;language&#39;, # &quot;Do you know how to speak another language aside from English?&quot;, &#39;height&#39;, # &quot;How tall are you in inches?&quot;, &#39;shoe&#39;, # &quot;What size shoe do you wear? (US Size)&quot;, &#39;hand&#39;, # &quot;Are you right-handed or left-handed?&quot;, &#39;happy&#39;, # &quot;How happy do you consider yourself on a scale from 1 to 5, with 1 being extremely unhappy, 5 being extremely happy, and 3 being the average person?&quot;, &#39;sing&#39;, # &quot;Do you consider yourself better or worse than average at singing?&quot;, &#39;pizza_or_love&#39;, # &quot;What&#39;s more important pizza or love?&quot;, &#39;dance&#39;, # &quot;Do you consider yourself better than average at dancing?&quot;, &#39;sleep&#39;, # &quot;How many hours did you sleep last night&quot;, &#39;eat&#39;, # &quot;Would you rather eat&quot;, &#39;adjective&#39;, # &quot;What is the one adjective that best describes you?&quot;, &#39;teeth&#39;, # &quot;How many teeth do you have?&quot;, &#39;braces&#39;, # &quot;If you had to have braces the rest of your life, which color would you choose?&quot;, &#39;siblings&#39;, # &quot;How many siblings do you have?&quot;, &#39;wrestle&#39;, # &quot;Of the people in this room, who would win a pinky wrestle against Michael?&quot;, &#39;hangout&#39;, # &quot;What is the best place to hang out in Sewanee?&quot;, &#39;movies&#39;, # &quot;How many movies have you watched in the last month?&quot; &#39;dob&#39; # &quot;What is your date of birth?&quot; ) survey &lt;- survey %&gt;% mutate( dob = mdy( dob ), age_in_weeks = as.numeric( difftime( Sys.Date(), dob, units = &#39;weeks&#39;) ) ) 4. In order to make a plot we need a piece of paper or a canvas. So let’s make a canvas: 5. To get started, let’s make some bar plots. 6. Great! Now let’s make a different kind of plot. First, draw your x axis and your y axis (a.k.a. make your coordinates). Ask yourself: What do I want to see? 7. Map the data to the coordinates. Here we will map the data to the coordinates using points. Ask yourself: How do I want to show what I want to see? 8. What if you want to color code these points? Now you’re choosing what else you want to see and how. 9. Add some labels. ggplot() automatically added axis titles and a legend, but we can add some more using the labs() function. Let’s add an overhead title, a sub-title, and a caption. 10. We can also make separate plots for a variable by faceting. 11. Let’s stylize the plot with a different theme. 12. Ready for something different? Let’s make a histogram. 13. As you can see, we can make a lot of different types of charts in R. You can even make a new variable and use it in your plot, but let’s not get ahead of ourselves. So let’s learn by doing rather than lecturing and move on to a new dataset. Demography exercises We’re going to work with some anonymized demography data, for both households and individuals. Let’s start by creating a new script, naming it demography.R, and reading in some data as shown below: library(tidyverse) households &lt;- readr::read_csv(&#39;https://datatrain.cc/data/anonymized_demography.csv&#39;) people &lt;- readr::read_csv(&#39;https://datatrain.cc/data/anonymized_demography_individuals.csv&#39;) What is the average age of people? On average, who is older: men or women? How many children are there in the dataset? Make a histogram of age. Make a smoothed histogram using geom_density of age. Make a smoothed histogram of age, but make different “fill” colors for men and women. Make a point chart wherein the x-axis is sex and the y-axis is age. Replace geom_point with geom_jitter so that the points don’t overlap so much. Make the points semi-transparent. Make the points twice as large. Give the plot a title, an x label, and a y label. Add a “violin” plot to the plot. Move the violin to behind the points. Make the points colored by sex. Replace the violin chart with a boxplot. What is the breakdown of household heads and sex (i.e., what number and percentage of household heads are male vs female)? Make a bar chart showing the number of households which are headed by men vs women. What is the average age of household heads who are female vs. the average age of household heads who are male? Make a chart showing the distribution of household heads’ age, which shows both males and females separately. What do you think explains this difference in age? Make a new variable indicating whether the household head is the oldest person in their household or not. What percentage of female household heads are the oldest person in their household? And males? What is the age of the youngest household head? Create a simple scatter plot with longitude as the x value and latitude as the y value. Make a table showing the distribution of wall types. Make a chart to replace the above table. Which fieldworker visited the most households? Which cluster has the most cattle? On what date were most households visited? Gapminder exercises This review exercise is useful immediately after you learn ggplot2 and dplyr.   First, let’s read in some data on health from the World Bank: library(readr) library(dplyr) library(ggplot2) library(gapminder) gm &lt;- gapminder::gapminder 1. How many rows are in the dataset? 2. How many columns are in the dataset? 3. What are the names of the columns? 4. What is the oldest year in the dataset? 5. What is the country/year with the greatest population in the dataset? 6. Get the average GDP per capita for each continent in 1952. 7. Get the average GDP per capita for each continent for the most recent year in the dataset. 8. Average GDP is a bit misleading, since it does not take into account the relative size (in population) of the different countries (ie, China is a lot bigger than Cambodia). Look up the function weighted.mean. Use it to get the average life expectancy by continent for the most recent year in the dataset, weighted by population.   9. Make a barplot of the above table (ie, average life expectancy by continent, weighted by population). 10. Make a point plot in which the x-axis is country, and the y-axis is GDP. Add the line theme(axis.text.x = element_text(angle = 90)) in order to make the x-axis text vertically aligned. What’s the problem with this plot? How many points are there per country? 11. Make a new version of the above, but filter down to just the earliest year in the dataset. 12. Make a scatterplot of life expectancy and GDP per capita, just for 1972. 13. Make the same plot as above, but for the most recent year in the data. 14. Make the same plot as the above, but have the size of the points reflect the population. 15. Make the same plot as the above, but have the color of the points reflect the continent.   16. Filter the data down to just the most recent year in the data, and make a histogram (geom_histogram) showing the distribution of GDP per capita. 17. Get the average GDP per capita for each continent/year, weighted by the population of each country. 18. Using the data created above, make a plot in which the x-axis is year, the y-axis is (weighted) average GDP per capita, and the color of the lines reflects the content. 19. Make the same plot as the above, but facet the plot by continent. 20. Make the same plot as the above, but remove the coloring by continent.   21. Make a plot showing France’s population over time. 22. Make a plot showing all European countries’ population over time, with color reflecting the name of the country. 23. Create a variable called status. If GDP per capita is over 20,000, this should be “rich”; if between 5,000 and 20,000, this should be “middle”; if this is less than 5,000, this should be “poor”. 24. Create an object with the number of rich countries per year. 25. Create an object with the percentage of countries that were rich each year.   26. Create a plot showing the percentage of countries which were rich each year. 27. Create an object with the number of people living in poor countries each year. 28. Create a chart showing the number of people living in rich, medium, and poor countries per year (line chart, coloring by status). 29. Create a chart showing the life expectancy in Somalia over time. 30. Create a chart showing GDP per capita in Somalia over time.   31. Create a histogram of life expectancy for the most recent year in the data. Facet this chart by continent. 32. Create a barchart showing average continent-level GDP over time, weighted for population, with one bar for each year, stacked bars with the color of the bars indicating continent (geom_bar(position = 'stack')). 33. Create the same chart as above, but with bars side-by-side (geom_bar(position = 'dodge')) 34. Generate 3-5 more charts / tables that show interesting things about the data. 35. Make the above charts as aesthetically pleasing as possible. Exercises with world health data Start by reading in your data. Explore the data, and write 3 questions you’d like to ask it. Answer the questions with tables. Answer the questions with charts. "],["exploring-sanitation.html", "Module 7 Exploring sanitation", " Module 7 Exploring sanitation In the world of data science and public health, we have to work as a team to solve problems. Today you are going to apply what you’ve learned about dplyr and ggplot to learn about sanitation around the world. Good luck! 1. Make a folder in your datalab folder on your desktop and call it sanitation. 2. Open up an RScript and name it sanitation.R and save it into your sanitation folder. 3. In your RScript copy the following questions 4-7 and answer them as a team. 4. Look up improved vs. unimproved sanitation. What kind of sanitation does the US use, improved, unimproved or both? 5. What is open defecation? Is it a type of improved or unimproved sanitation? 6. Is open defecation bad or good? Why or why not? 7. Why do some countries have high rates of open defecation and others do not? 8. Now that you know a bit about sanitation, let’s start looking at some data. Download the dataset shared with you on slack (sanitation.csv) and save it to your sanitation folder. 9. STOP! WE WILL DO THIS TOGETHER! In your sanitation.R script underneath your questions, copy and paste the following line of code and inside the quotes hit tab. Then follow your files until you are in your sanitation folder which is inside your datalab folder on your desktop. If it is not there, go back and re-do questions 1 and 2 above (don’t forget to comment your script!): # set working directory setwd(&quot;&quot;) 10. Write code to load the tidyverse. 11. Now load sanitation.csv into R and assign it a name using the following line of code: # load in the data sanitation &lt;- read_csv(&#39;sanitation.csv&#39;) 12. What are the column names and based on these column names what is this dataset about? 13. Make a table of the World Bank’s income classifications. STOP! WE WILL DO THE NEXT FEW QUESTIONS TOGETHER! 14. Since working with really long column names with spaces is really hard, let’s change the column names together. 15. Let’s look at data for the most recent year. 16. To make it easier to explore the most recent data, let’s name this dataset latest. 17. Using latest, how many countries are there? 18. How many countries are there from each continent? 19. How many countries are there from each income group? 20. Let’s look at data for the low-income countries in Asia. How have their open defecation rates changed over time? Let’s talk through this together before writing any code! RESUME WORKING WITH YOUR GROUP NOW! 21. Make a line graph of safely managed sanitation services over the years in India. 22. Make a line graph of open defecation rates over the years for the country of your choice. 23. Using latest, make a scatterplot showing GDP per capita versus open defecation rates. Color the points by income group and give your plot good labels. 24. Now create separate panels showing the same scatterplots by continent. 25. To make these scatterplots nicer, let’s move the legends and reorder the income groups. We’ll do this one together! 26. To learn another new thing, let’s make a bar chart of sanitation services for South America. Then improve it by filling by income group. 27. Now make a bar chart of sanitation services for the continent of your choice. Remember to fill by income group! 28. Using latest, make a scatterplot showing rural versus urban open defecation rates. Color the points in an informative way and give your plot good labels. 29. Put the sanitation data for the first year in sanitation in an object called oldest. 30. Recreate the visuals above using oldest and compare the results to what you got with latest. What’s changed? What hasn’t changed? "],["making-maps.html", "Module 8 Making maps Exploring features with osmdata Exploring census tracts with tidycensus", " Module 8 Making maps Maps are great for exploring geographic data, like the prevalences of diseases in different countries or the demographics of voting districts in different states. In addition to being efficient data visualizations, well-made maps are beautiful! 1. Open a new R script and name it maps.R 2. Install the following libraries: sf, rnaturalearth, rnaturalearthhires, rnaturalearthdata, tmap, osmdata, and tidycensus 3. Now that you’ve installed these libraries, write code to load them along with dplyr. 4. The first thing you have to do to make a map is to get the underlying geospatial data – we’ll use the rnaturalearth packages to streamline this step, which can sometimes be quite challenging! Since you met people from KEMRI this morning, let’s start by getting the data we need for a map of Kenya: kenya &lt;- ne_countries( country = &quot;Kenya&quot;, returnclass = &quot;sf&quot; ) 5. Look at the data in the kenya object to get a feel for what’s there. How many columns are there? What are their names? 6. For right now, the most important column is the one called geometry. Let’s look at it: kenya$geometry 7. This tells us what kind of geospatial data we’ve got: a polygon. This also tells us how to make our map! tm_shape( kenya ) + tm_polygons() 8. Great! That’s Kenya. Not a very exciting map, though – let’s make it better and more interactive: # get a good background : tmap_options( basemaps = providers$OpenStreetMap ) # make the map interactive : tmap_mode( &quot;view&quot; ) # make a map of Kenya with a nice transparency setting : tm_shape( kenya ) + tm_polygons( alpha = 0.5 ) 9. Time to try something new: with your partner, get the data you need and make a map of Mozambique. 10. Countries are not just monoliths – they have constituent states or districts. Let’s get a more detailed map of Kenya: kenya_states &lt;- ne_states( country = &quot;Kenya&quot;, returnclass = &quot;sf&quot; ) tm_shape( kenya_states ) + tm_polygons( alpha = 0.5 ) 11. Wouldn’t it be nice if we could see the names of the states easily? Great idea! tm_shape( kenya_states ) + tm_polygons( alpha = 0.5, id = &quot;name&quot; ) 12. Update your map of Mozambique to show its districts with their names. 13. What if you want to make a map of all of Africa? That’s easy, too, once you have the right geospatial data. Let’s start big: world &lt;- ne_countries( scale = &quot;medium&quot;, returnclass = &quot;sf&quot; ) tm_shape( world ) + tm_polygons( alpha = 0.5 ) 14. Explore the names of the columns in world. How can we get the countries in Africa? Use your dplyr skills! 15. Make a map of South America, with country names shown when you mouse over them. 16. Now for a challenge: let’s make a map of South America showing all of the countries’ constituent states/districts. Exploring features with osmdata Exploring census tracts with tidycensus "],["making-choropleths.html", "Module 9 Making choropleths", " Module 9 Making choropleths Now that you know how to make some basic maps, let’s learn how to add information to them. Open a new R script, name it choropleths.R, and save it to your DataLab folder. 1. At the top of choropleths.R, load the libraries we used to make our first maps. Also, load the library readr so we can read CSVs as needed. library(dplyr) library(readr) library(sf) library(rnaturalearth) library(rnaturalearthhires) library(rnaturalearthdata) library(tmap) 2. For starters, let’s use data from the spData package to make a U.S. map. First, get the data: us_states &lt;- spData::us_states 3. Use tmap to make a map with this data. 4. Explore the data a bit – what other information could we show on our map? Let’s do it! Maps like these, with regions colored according to some data, are called choropleths. Making one usually involves three steps: get the geospatial dataset you need, get the dataset with the other data you want to show, and add the other data to the geospatial dataset. We’ll go through these steps together once, then you and your partner will go through them with some new data to make your own choropleth. 5. Create an object called world that has polygons for all of the world’s countries. (Review what we did before!) 6. Remove Antarctica from world – this will make our map look nicer later. 7. Make a map of the world (excluding Antarctica). 8. Using the pop_est variable in world, update your world map and color the countries according to their populations. If the legend is in the way, move it! 9. Download data on outdoor air pollution from Our World in Data. Save the data in the file pollution.csv in your DataLab folder. 10. Use readr::read_csv() to load your pollution data. 11. Use the dplyr function rename() to rename ONLY the last column in pollution. Let’s make the new name “share_of_deaths”. 12. Compare the variables in pollution with the variables in world to figure out how to join them. We’ll go through this together. 13. Make a new world map and color the countries according to their share of deaths attributed to pollution. "],["working-with-dates-and-times.html", "Working with dates and times Getting to work Getting familar with dates The datetime class Common tasks 9.1 Dates, Times, and Malaria 9.2 Coughs", " Working with dates and times “Today is a day. Tomorrow is another day. And right now is a moment in time that has changed to another moment in time, from one second to the next.” - Anonymous Learning goals Be able to read dates, and convert objects to dates Be able to convert dates, extract useful information, and modify them Use date times Gain familiarity with the lubridate package Hadley Wickham’s tutorial on dates starts with 3 simple questions: Does every year have 365 days? Does every day have 24 hours? Does every minute have 60 seconds? &gt; “I’m sure you know that not every year has 365 days, but do you know the full rule for determining if a year is a leap year? (It has three parts.) You might have remembered that many parts of the world use daylight savings time (DST), so that some days have 23 hours, and others have 25. You might not have known that some minutes have 61 seconds because every now and then leap seconds are added because the Earth’s rotation is gradually slowing down. Dates and times are hard because they have to reconcile two physical phenomena (the rotation of the Earth and its orbit around the sun) with a whole raft of geopolitical phenomena including months, time zones, and DST. This chapter won’t teach you every last detail about dates and times, but it will give you a solid grounding of practical skills that will help you with common data analysis challenges.” Getting to work First, open an RScript, name it dates and times.R and set your working directory. Install the lubridate package and load the library. install.packages(&#39;lubridate&#39;) library(lubridate) library(dplyr) Getting familar with dates Get today’s date using: today() Then make today into an object called today. Even though today looks like a simple character string, it is not. There are all sorts of date-time calculations in the background. To demonstrate this, let’s bring in a simple string. Make a variable called my_bday and my_partners_bday using the following format: my_birthday &lt;- &#39;1967-06-09&#39; If you run str(my_birthday) and str(today), do you see any major differences? (talk amongst your group) Note that class type of the variable impacts what you can do with the text. For instance, the following causes an error… today - my_birthday Try re-running the calculation above after running the following line of code: my_birthday &lt;- as_date(my_birthday) Why did it work? The datetime class When you are working with a datetime object, you can add and subtract time to it. Let’s make a variable that has the time as of right now and then look at it: n &lt;- now() n This is how you can add or subtract seconds to now: n + seconds(1) Add or subtract hours: n - hours(5) Want to only see the date of now? Try this: as_date(n) Look at how time flies when you’re having fun: later &lt;- now() later Calculate how long it took you from when you created now until you created the variable later. Common tasks Converting words (strings) to dates The lubridate package was built to handle dates of various input formats. The following functions convert a character with a particular format into a standard datetime object: ymd(&quot;2017-01-31&quot;) This also works if the single-digit dates are not padded with a 0: ymd(&quot;2017-1-31&quot;) Other formats can also be handled. Try to find a way to make the following into date formats: &quot;2017-31-01&quot; &quot;January 31st, 2017&quot; &quot;31-Jan-2017&quot; Hint: try re-organising the letters from ymd which stands for year month day. Extracting components from dates Let’s practice extracting information from the following datetime object: datetime &lt;- ymd_hms(&quot;2016-07-08 12:34:56&quot;) year(datetime) Get the month: month(datetime) Get the day of the month: mday(datetime) Get the day of the year: yday(datetime) Get the day of the week: wday(datetime) Get the name of the day of the week: weekdays(datetime) Get the hour of the day: hour(datetime) Get the minute of the hour: minute(datetime) Get the seconds of the minute: second(datetime) Dealing with time zones When working with dates and times in R, time zones can be a major pain, but the lubridate package tries to simplify this. Adjust timezones for dates: # Today&#39;s date where I am today() # Today&#39;s date in New Zealand today( tzone = &#39;NZ&#39; ) Adjust time zones for date-times: # Time where I am now() # Time in UTC / GMT (which are synonymous) now(&#39;UTC&#39;) now(&#39;GMT&#39;) Don’t know what time zone your computer is working in? Use this function: Sys.timezone() To get a list of time zones accepted in R, use the function OlsonNames (there are about 500 options): OlsonNames() %&gt;% head(50) If you ever need to force the timezone of a datetime object to change without actually changing the date or time, use the function force_tz(): # Get current time in UTC/GMT n &lt;- now(&#39;UTC&#39;) n # Change timezone to Central Standard Time without changing time: force_tz(n, tzone=&#39;America/Chicago&#39;) Using timestamps instead One way to avoid timezone issues is to convert a datetime object to a numeric timestamp. Timestamps record the number of seconds that have passed since midnight GMT on January 1, 1970. It doesn’t matter which timezone you are standing inñ the seconds that have passed since that moment will be the same: # Time where I am now() %&gt;% as.numeric() What is the difference between the line of code above and now()? Timestamps can simplify things when you are doing a lot of adding and subtracting with time. Timestamps are just seconds; they are just numbers. So they are much less of a black box than datetimeobjects. You can always convert from a timestamp back into a datetimeobject: # Convert to timestamp ts &lt;- now() %&gt;% as.numeric() ts # Convert back to datetime object ts %&gt;% as_datetime() Exercises Create datetime objects Use the appropriate lubridate function to parse each of the following dates (aka make each of the following strings into dates): 1. January 1, 2010 2. 2015-Mar-07 3. 06-Jun-2017 4. c('August 19 (2015)', 'July 1 (2015)') 5. 12/30/14 Extracting datetime components Work with this date: dt &lt;- &#39;2000-01-04 03:43:01&#39; 6. Make a variable with the following name with the corresponding information using the date above: raw (containing the original string) year month dom(day of month) doy (day of year) hour minutes seconds 7. Now calculate two more variables: timestamp diff(the difference, in days, between this time and midnight GMT on January 1, 1970) Some common uses of datetime 8. Write code to say what time it is in the timezone that you were born in. 9. Calculate your age using your birthday and today’s date in years. In days! In seconds!! 10. How many seconds have occurred since the Armistice Day? 9.1 Dates, Times, and Malaria 9.1.1 Learning goals This is a review exercise. You’ll be using the skills you’ve developed with the ´dplyr´, ´ggplot2´, and ´lubridate´ packages. 1. Start a new script. Name it `malaria.R´. 2. Set up your work space by loading the ´readr´, ´ggplot2`, ´dplyr´, and ´lubridate´ packages. 3. Read in some malaria data by running the following: pms &lt;- read_csv(&#39;https://github.com/databrew/intro-to-data-science/blob/main/data/pms.csv?raw=true&#39;) 4. Take a look at the first few rows of the data. What is the unit of observation? 5. Create a new column/variable in pms named dow (as in, “day of week”). This should be the day of the week of the date_visit. 6. How many visits were there to Catale on May 1 2022? 7. How many of those were for malaria? 8. Which age group has had the most malaria? 9. What day of the week has the most visits? 10. Which month has had the most malaria visits? 11. Which month has had the greatest percentage malaria visits? 12. Make a variable called hour of day? 13. Which hour of day has the most visits? 14. What do you think the function mdy_hms is/does? 15. Look up the documentation for mdy_hms. 16. Use mdy_hms to create a new variable in pms named date_time based on the variable start_time. 17. Use the hour function to create a variable named hour_of_day from the date_time variable. This should be the hour of the day. 18. Get the total number of malaria cases diagnoses by hour of day. 19. Visualize the total number of malaria cases diagnoses by hour of day. 20. Visualize the total number of malaria cases diagnoses by hour of day, but separated by day. 9.2 Coughs As you can see there are so many ways in which you can work with dates and times. One final example which you may not have thought of in a million years is looking at cough data. First, download the data: coughs &lt;- read_csv(&#39;https://raw.githubusercontent.com/databrew/intro-to-data-science/main/data/coughs.csv&#39;) 1. Create a dow (day of week) column. 2. Create a date (without time) column. 3. How many coughs happened each day? 4. Create a chart of coughs by day. 5. Look up floor_date. Use it to get the number of coughs by date-hour. 6. Create an hour variable. 7. Use the hour variable to create a night_day column indicating whether the cough was occurring at night or day. 8. Does this child cough more at night or day? Once you’re done be sure to ask Matthew, ‘what is Hyfe?’ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
